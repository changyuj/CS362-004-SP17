        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/******************************************************
        -:    2: * Yu Ju Chang
        -:    3: * randomtestcard1.c
        -:    4: * Assignment 4
        -:    5: *
        -:    6: * smithy random test
        -:    7: *****************************************************/
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <stdio.h>
        -:   11:#include <string.h>
        -:   12:#include <time.h>
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include "rand_test_helper.h"
        -:   16:#include "rngs.h"
        -:   17: 
        -:   18:// set NOISY_TEST to 0 to remove printfs from output
        -:   19:// set NOISY_TEST to 1 to display printfs in output
        -:   20:#define NOISY_TEST 1
        -:   21:#define TEST_SIZE 20
        -:   22:#define DECK_SIZE 100
        -:   23:#define HAND_SIZE 27
        -:   24: 
function checkSmithy called 82 returned 100% blocks executed 100%
       82:   25: int checkSmithy(int thisPlayer, struct gameState *testG, int handPos)
        -:   26: {
        -:   27:	struct gameState G2;
       82:   28:	memcpy(&G2, testG, sizeof(struct gameState));
       82:   29:	int initial_hand, initial_discard, test_num = 0;
        -:   30:	
       82:   31:	initial_hand = testG->handCount[thisPlayer];
       82:   32:	initial_discard = testG->discardCount[thisPlayer];
       82:   33:	playSmithy(&G2, handPos);
call    0 returned 100%
        -:   34:
        -:   35:	
        -:   36:#if (NOISY_TEST == 1)
       82:   37:    printf("Testing player %d hand...should have 2 extra card in hand with smithy discarded\n", thisPlayer+1);
call    0 returned 100%
       82:   38:	printf("\nhand count: %d\tExpected: %d\n",G2.handCount[thisPlayer], initial_hand+2);
call    0 returned 100%
        -:   39:#endif
        -:   40://should have added 3 new card and discarded 1 card so hand size should be 2 card more than original
       82:   41:	test_num += assertEqual(initial_hand+3-1, G2.handCount[thisPlayer]);
call    0 returned 100%
        -:   42:			
        -:   43:#if (NOISY_TEST == 1)
       82:   44:    printf("Testing player %d discard count... discard cound should increase by 1\n", thisPlayer+1);
call    0 returned 100%
       82:   45:	printf("\ndiscard count: %d\tExpected: %d\n",G2.discardCount[thisPlayer], initial_discard+1);
call    0 returned 100%
        -:   46:#endif
       82:   47:	test_num += assertEqual(initial_discard+1, G2.discardCount[thisPlayer]);
call    0 returned 100%
        -:   48:	
       82:   49:	return test_num;
        -:   50: }
function main called 2 returned 100% blocks executed 100%
        2:   51: int main()
        -:   52: {
        -:   53:	int i, n, p, q, r, x, z, random;
        2:   54:	int failTest = 0, totalFailed = 0, counter = 0;
        2:   55:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        2:   56:    int seed = 1000;
        -:   57:	
        -:   58:	// Initialize random stream
        2:   59:    SelectStream(2);
call    0 returned 100%
        2:   60:    PutSeed(3);
call    0 returned 100%
        -:   61:	
        2:   62:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   63:	struct gameState G;
        -:   64:	
        2:   65:	printf ("Random Testing Adventurer.\n");
call    0 returned 100%
        -:   66:
        2:   67:	printf ("RANDOM TESTS.\n");
call    0 returned 100%
        -:   68:
        -:   69:
       42:   70:	for(i = 0; i < TEST_SIZE; i++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   71:	{	
        -:   72:
        -:   73:		//randomized chao in hand
  1052040:   74:		for (r = 0; r < sizeof(struct gameState); r++) 
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   75:		{
  1052000:   76:			((char*)&G)[r] = floor(Random() * 256);
call    0 returned 100%
        -:   77:		}
        -:   78:		
        -:   79:		//random num of player
       40:   80:		p = rand() % 4 + 1;
call    0 returned 100%
        -:   81:		
        -:   82:		//clear gamestate
       40:   83:		memset((char*)&G, 0, sizeof(struct gameState));
        -:   84:		
        -:   85:		//initialize game state
       40:   86:		initializeGame(p, k, seed, &G);
call    0 returned 100%
        -:   87:		//set number of players
       40:   88:		G.numPlayers = p;
        -:   89:		
        -:   90:		
        -:   91:		//go through all player
      122:   92:		for(n = 0; n < p; n++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   93:		{
        -:   94:			//select player
       82:   95:			G.whoseTurn = n;
        -:   96:			
        -:   97:			//set deck count with random size
       82:   98:			G.deckCount[n] = floor(Random() * DECK_SIZE);;
call    0 returned 100%
       82:   99:			memset(G.deck[n], 0, sizeof(int) * G.deckCount[n]);
        -:  100:			
        -:  101:			//fill deck with random cards
     2812:  102:			for(z = 0; z < G.deckCount[n]; z++)
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -:  103:			{
     2730:  104:				random = floor(Random() * 28);
call    0 returned 100%
     2730:  105:				G.deck[n][z] = random;
        -:  106:			}
        -:  107:			
        -:  108:			//set hand count with random size
       82:  109:			G.handCount[n] = floor(Random() * HAND_SIZE);;
call    0 returned 100%
       82:  110:			memset(G.hand[n], 0, sizeof(int) * G.handCount[n]);
        -:  111:
        -:  112:			//fill hand with random cards
      840:  113:			for(x = 0; x < G.handCount[n]; x++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  114:			{
      758:  115:				random = floor(Random() *28);
call    0 returned 100%
      758:  116:				G.hand[n][x] = random;
        -:  117:			}
        -:  118:			
        -:  119:			//randomly insert smithy in hand
       82:  120:			int y = floor(Random() * HAND_SIZE);
call    0 returned 100%
       82:  121:			G.hand[n][y] = smithy;
        -:  122:			
        -:  123:			//set discard count with random size
       82:  124:			G.discardCount[n] = floor(Random() * (DECK_SIZE - 50));
call    0 returned 100%
        -:  125:			
        -:  126:			//fill discard with random card
     2046:  127:			for(q = 0; q < G.discardCount[n]; q++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  128:			{
     1964:  129:				random = floor(Random() * 28);
call    0 returned 100%
     1964:  130:				G.discard[n][q] = random;
        -:  131:			}
        -:  132:#if (NOISY_TEST == 1)
       82:  133:            printf("\nTest Number %d\tplayer: %d\tdeckCount: %d\thandCount: %d\tdiscardCount: %d\n\n",i+1, n+1, G.deckCount[n],G.handCount[n],G.discardCount[n]);
call    0 returned 100%
        -:  134:#endif		
       82:  135:			failTest = checkSmithy(n, &G, y);
call    0 returned 100%
       82:  136:			counter+=2;
       82:  137:			totalFailed += failTest;
        -:  138:		}
        -:  139:#if (NOISY_TEST == 1)		
       40:  140:		printf("------------------ Test number %d complete with %d failed tests --------------------\n", i+1, failTest);
call    0 returned 100%
        -:  141:#endif			
        -:  142:	}
        2:  143:	printf("------------------ %d runs with total %d tests completed with %d failed tests --------------------\n", TEST_SIZE, counter, totalFailed);
call    0 returned 100%
        -:  144:	
        2:  145:	return 0;
        -:  146: }
